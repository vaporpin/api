on:
  push:
    branches:
      - master
  #   paths-ignore:
  #     - .github/workflows/**
  # pull_request:
  #   branches:
  #     - master
  #   types: [opened, reopened, synchronize]
  #   paths-ignore:
  #     - .github/workflows/**
  # workflow_dispatch:

name: Continuous Integration

env:
  ROLE_ID: 4363c2ed-922e-01e6-83f8-4642eaa1a84d
  SECRET_ID: 75e91407-21ac-9e5c-e715-f94766bf447d
  caCertificate: MIIEVjCCAz6gAwIBAgIQJr4c8a5E4CfWsOZAPGfmgDANBgkqhkiG9w0BAQsFADCB
xDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRUwEwYDVQQHEwxUaGUgSW50cmFu
ZXQxGzAZBgNVBAkTEjEyMyBFeGFtcGxlIFN0cmVldDETMBEGA1UEERMKOTU1NTkt
MTIyNzEVMBMGA1UEChMMRXhhbXBsZSwgSW5jMSwwKgYDVQQLEyNEZXBhcnRtZW50
IG9mIENlcnRpZmljYXRlIEF1dGhvcml0eTEaMBgGA1UEAxMRRXhhbXBsZSBJbmMu
IFJvb3QwHhcNMjEwMzA1MDk1ODI4WhcNMjQwMzA0MDk1ODI4WjCBxDELMAkGA1UE
BhMCVVMxCzAJBgNVBAgTAkNBMRUwEwYDVQQHEwxUaGUgSW50cmFuZXQxGzAZBgNV
BAkTEjEyMyBFeGFtcGxlIFN0cmVldDETMBEGA1UEERMKOTU1NTktMTIyNzEVMBMG
A1UEChMMRXhhbXBsZSwgSW5jMSwwKgYDVQQLEyNEZXBhcnRtZW50IG9mIENlcnRp
ZmljYXRlIEF1dGhvcml0eTEaMBgGA1UEAxMRRXhhbXBsZSBJbmMuIFJvb3QwggEi
MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDDZsl30r5cI6rIZ5ucQHp1KoCk
BHbD/c+kYAOmq6flt/J6PI2G2xNMOP2UrHlP5DuIf7rUf9//G39vsWReg9L/gRI/
6Md5TROBTsqaiF35yb3cFuvjdO84SvDhp+q6dAHao0CX4PervUhBnBhrZZtmxRRR
pjpZhlpIBXEUf/fq5vKisV08U+cTWEJHKE+GdmKz1UkxeXbFMusX1iq3rTQtfQL2
m2xBipSsrk6OUVDS5N21hOQtAnIixBVBqqDXbQkBpPM/dHyo4G0Y5CAf6Q2y8t1Q
8zuNtzjnAFHMsq0t7mViq+HyuC7b5mWKEp/PmXgPMlcuNdp37/6Qlp8Lc0fNAgMB
AAGjQjBAMA4GA1UdDwEB/wQEAwICBDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
BBSR2Bu7pH0iMuZP6bBD7LpLifh1DjANBgkqhkiG9w0BAQsFAAOCAQEAOTc/XoJC
BdrEn4cAsdBhl8Zd7pyCxadWiohSNGMUud02xdRMGsv4B0yfd4UxbPM3HGCgfgmU
JW9BBoqpPk8snVmDTullN7qwlKakp8FisLIfbqLdMmvnPzKOILFY302OPLc5kJxc
rE3L0zXWBwv6xe+OU/lmgRBMVDmChvFcRi07281Jv2RNbUukHftgRrxOdAqxd9O8
f095XAbDf/48E4F84ARTS1Z/nrpS2A2oO1g4nsxWOF1ZnODjIee+FArfGEQANkvO
GsSI9giEf6IagR1TvJk4KzSfZGZ4W6QiYyzhlONN6gE0vcCm55kO88ccY25Nps3R
cpEsuvhf+Vw9KA==

jobs:
  # Run app tests
  # test:
  #   # "Any self hosted runner made available to me will work"
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v2

  #     - run: npm install

  #     - run: npm run lint

  #     - run: npm run test
  #       env:
  #         APP_ID: api
  #         PORT: 3000
  #         LOG_LEVEL: debug
  #         REQUEST_LIMIT: 100kb
  #         SESSION_SECRET: mySecret
  #         OPENAPI_SPEC: '/api/v1/spec:'

  # Build and push image to Elastic Container Registry
  push:
    #needs: test
    # "Only self hosted runners tagged ecr-push will work"
    #runs-on: [self-hosted, ecr-push]

    # Upon merge to master branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # The env context is not pre-populated with the self hosted runner's environment variables
      # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#env-context
      # - name: Add masks for environment variables
      #   run: |
      #     echo "::add-mask::$ROLE_ID"
      #     echo "::add-mask::$SECRET_ID"

      # - name: Set environment variables
      #   run: |
      #     echo "::set-env name=ROLE_ID::$ROLE_ID"
      #     echo "::set-env name=SECRET_ID::$SECRET_ID"

      # Import secrets from Vault
      - name: Import Secrets
        uses: hashicorp/vault-action@v1.0.1
        id: secrets
        with:
          url: 'https://35.198.224.19:8200' # Address of running Vault instance
          method: approle
          roleId: ${{ env.ROLE_ID }}
          secretId: ${{ env.SECRET_ID }}
          caCertificate: ${{ env.caCertificate }}

          # exportEnv: false
          # Alternative using IAM user (https://www.vaultproject.io/docs/secrets/aws#usage):
          # secrets: |
          #   /aws/creds/ecr-push access_key | AWS_ACCESS_KEY_ID ;
          #   /aws/creds/ecr-push secret_key | AWS_SECRET_ACCESS_KEY
      #     secrets: |
      #       /aws/sts/ecr-push access_key | AWS_ACCESS_KEY_ID ;
      #       /aws/sts/ecr-push secret_key | AWS_SECRET_ACCESS_KEY ;
      #       /aws/sts/ecr-push security_token | AWS_SESSION_TOKEN

      # # Authenticate with AWS using temporary credentials (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html)
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
      #     aws-session-token: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Log in to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   # 00000000000000.dkr.ecr.my-region.amazonaws.com/cakely-registry:823498longsha8382934
      #   run: |
      #     docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
      #     docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

      # - name: Log out of Amazon ECR
      #   if: always()
      #   run: docker logout ${{ steps.login-ecr.outputs.registry }}
